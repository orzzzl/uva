#include <bits/stdc++.h>
using namespace std;

int tests, startx, starty, xsize, ysize, n;

int memo [11][1 << 11];
int x [11], y [11];

int manhattan (int a, int b, int c, int d) {
    return abs (a - c) + abs (b - d);
}

int tsp (int pos, int bitmask) {
    if (bitmask == (1 << (n + 1) - 1))
        return (x [pos], y [pos], startx, starty);
    if (memo [pos][bitmask] != -1)    return memo [pos][bitmask];
    int ans = INT_MAX;
    for (int i = 0; i < n; i ++) {
	if (bitmask & (1 << i) != 1 && i != pos) {
	    ans = min (ans, tsp (i, bitmask | (1 << pos)));
	}
    }
    return memo [pos][bitmask] = ans;
}


int main () {
    scanf ("%d", &tests);
    while (tests --) {
	scanf ("%d %d", &xsize, &ysize);
	scanf ("%d %d", &startx, &starty);
	scanf ("%d", &n);
	memset (memo, -1, sizeof memo);
	for (int i = 0;i < n; i ++)
	    scanf ("%d %d", x + i, y + i);
	printf("The shortest path has length %d\n", tsp(0, 1));
    }
    return 0;
}
